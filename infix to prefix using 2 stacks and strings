from pythonds.basic.stack import Stack


def infixToPreFix(infixExpr):
    opStack = Stack()
    varStack = Stack()


    prec = {}
    prec["^"] = 4
    prec["*"] = 3
    prec["/"] = 3
    prec["+"] = 2
    prec["-"] = 2
    prec["("] = 1


    tokenList = infixExpr.split()
    for token in tokenList:
        if token in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" or token in "0123456789":
            varStack.push(token)
        elif token =='(':
            opStack.push(token)
        elif token == ')':

            while (not opStack.isEmpty()) and (opStack.peek()!='('):
                s1 = varStack.pop()
                s2 = varStack.pop()
                s3 = opStack.pop()
                tmp = s3+s2+s1
                varStack.push(tmp)
            opStack.pop()
        else:
            while (not opStack.isEmpty()) and (prec[opStack.peek()] > prec[token]):
                s1 = varStack.pop()
                s2 = varStack.pop()
                s3= opStack.pop()
                tmp = s3 + s2 + s1
                varStack.push(tmp)
                opStack.push(token)
            opStack.push(token)

    while not opStack.isEmpty():

        s1 = varStack.pop()
        s2 = varStack.pop()
        s3 = opStack.pop()
        tmp = s3 + s2 + s1

        varStack.push(tmp)

    return varStack.peek()


print( infixToPreFix("( A + B ) * ( C + D )" ) )
